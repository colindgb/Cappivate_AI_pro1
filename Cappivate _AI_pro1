const fs = require("fs");
const path = require("path");
const AdmZip = require("adm-zip");

// Define project structure
const projectFiles = {
    "cappivate-ai/backend/server.js": `
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const routes = require('./routes');

const app = express();
app.use(cors());
app.use(express.json());
app.use('/api', routes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(\`ðŸš€ Server running on port \${PORT}\`));
`,

    "cappivate-ai/backend/routes.js": `
const express = require('express');
const { linkSocialMedia, getLinkedAccounts } = require('./controllers');
const router = express.Router();

router.post('/link', linkSocialMedia);
router.get('/accounts', getLinkedAccounts);

module.exports = router;
`,

    "cappivate-ai/backend/controllers.js": `
const db = require('./database');

exports.linkSocialMedia = async (req, res) => {
    try {
        const { userId, platform, profileUrl } = req.body;
        await db.query(
            "INSERT INTO linked_accounts (user_id, platform, profile_url) VALUES ($1, $2, $3)",
            [userId, platform, profileUrl]
        );
        res.json({ success: true, message: \`\${platform} linked successfully!\` });
    } catch (err) {
        res.status(500).json({ error: "Database error" });
    }
};

exports.getLinkedAccounts = async (req, res) => {
    try {
        const userId = req.query.userId;
        const accounts = await db.query("SELECT * FROM linked_accounts WHERE user_id = $1", [userId]);
        res.json(accounts.rows);
    } catch (err) {
        res.status(500).json({ error: "Database error" });
    }
};
`,

    "cappivate-ai/backend/database.js": `
const { Pool } = require('pg');
const pool = new Pool({
    user: 'postgres',
    host: 'localhost',
    database: 'cappivate_ai',
    password: 'securepassword',
    port: 5432
});

module.exports = {
    query: (text, params) => pool.query(text, params),
};
`,

    "cappivate-ai/backend/.env.example": `
PORT=5000
DB_USER=postgres
DB_HOST=localhost
DB_NAME=cappivate_ai
DB_PASSWORD=your_secure_password
DB_PORT=5432
JWT_SECRET=your_secret_key
`,

    "cappivate-ai/frontend/components/SocialMediaLinker.js": `
import { useState } from 'react';

const platforms = ["Facebook", "Instagram", "X (Twitter)", "TikTok", "YouTube"];

export default function SocialMediaLinker() {
    const [platform, setPlatform] = useState("");
    const [profileUrl, setProfileUrl] = useState("");

    const handleSubmit = async () => {
        const response = await fetch('/api/link', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ userId: "user123", platform, profileUrl })
        });
        const data = await response.json();
        alert(data.message);
    };

    return (
        <div>
            <h2>Link Your Social Media</h2>
            <select onChange={(e) => setPlatform(e.target.value)} defaultValue="">
                <option value="" disabled>Select Platform</option>
                {platforms.map(p => <option key={p} value={p}>{p}</option>)}
            </select>
            <input type="text" placeholder="Enter profile URL" onChange={(e) => setProfileUrl(e.target.value)} />
            <button onClick={handleSubmit}>Link Account</button>
        </div>
    );
}
`,

    "cappivate-ai/database/schema.sql": `
CREATE DATABASE cappivate_ai;

CREATE TABLE linked_accounts (
    id SERIAL PRIMARY KEY,
    user_id VARCHAR(50) NOT NULL,
    platform VARCHAR(20) NOT NULL,
    profile_url TEXT NOT NULL
);
`,

    "cappivate-ai/.github/workflows/backend-deploy.yml": `
name: Deploy Backend

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install
        working-directory: backend

      - name: Deploy to AWS EC2
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
          HOST: ${{ secrets.AWS_HOST }}
          USER: ubuntu
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -r backend ubuntu@$HOST:~/backend
          ssh -i private_key.pem ubuntu@$HOST 'cd ~/backend && npm install && pm2 restart server'
`,

    "cappivate-ai/.github/workflows/frontend-deploy.yml": `
name: Deploy Frontend

on: [push]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install
        working-directory: frontend

      - name: Deploy to Vercel
        run: |
          npm install -g vercel
          vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
`
};

// Create directories and files
Object.keys(projectFiles).forEach(filePath => {
    const dir = path.dirname(filePath);
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
    }
    fs.writeFileSync(filePath, projectFiles[filePath].trim());
});

console.log("âœ… All files created successfully!");

// Zip the entire project
const zip = new AdmZip();
zip.addLocalFolder("cappivate-ai");
zip.writeZip("CappivateAI.zip");

console.log("âœ… CappivateAI.zip created successfully!");
